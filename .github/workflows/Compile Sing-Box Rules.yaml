name: Compile Sing-Box Rules

# 允许 workflow 使用 GITHUB_TOKEN 推送编译结果
permissions:
  contents: write

on:
  push:
    paths:
      - 'rule-set/**/*.json'

jobs:
  compile_rules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq tar

      - name: Download & extract latest Sing-Box release
        id: download-singbox
        run: |
          set -euo pipefail

          echo "Fetching latest release tag..."
          latest_tag=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r .tag_name)
          if [ -z "$latest_tag" ] || [ "$latest_tag" = "null" ]; then
            echo "Failed to get latest release tag" >&2
            exit 1
          fi
          echo "Latest tag: $latest_tag"

          # 去掉前缀 v 得到没有 v 的版本号
          version_no_v=${latest_tag#v}
          echo "Version without v: $version_no_v"

          asset_name="sing-box-${version_no_v}-linux-amd64.tar.gz"
          download_url="https://github.com/SagerNet/sing-box/releases/download/${latest_tag}/${asset_name}"
          echo "Download URL: $download_url"

          # 下载
          wget -q --show-progress "$download_url" -O "$asset_name"

          # 解压
          tar -zxvf "$asset_name"

          # 找到解压出的目录（匹配 sing-box-*-linux-amd64）
          extracted_dir=$(ls -d sing-box-*-linux-amd64 2>/dev/null | head -n1 || true)
          if [ -z "$extracted_dir" ]; then
            echo "Cannot find extracted directory after tar." >&2
            ls -al
            exit 1
          fi
          echo "Extracted directory: $extracted_dir"

          # 如果已有旧的 sing-box 目录，先移除（谨慎）
          if [ -d "sing-box" ]; then
            rm -rf sing-box
          fi

          # 重命名为统一目录 sing-box
          mv "$extracted_dir" sing-box

          # 确保二进制可执行
          chmod +x sing-box/sing-box

          # 清理压缩包
          rm -f "$asset_name"

          # 导出 step outputs，供后续步骤使用（可选）
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "version_no_v=${version_no_v}" >> $GITHUB_OUTPUT

      - name: Compile rule-set JSON -> .srs
        id: compile
        run: |
          set -euo pipefail

          # 进入 sing-box 目录（我们在上一步已经把解压目录重命名为 sing-box）
          cd sing-box

          # 检查 sing-box 可执行文件
          if [ ! -x ./sing-box ]; then
            echo "sing-box binary not found or not executable at $(pwd)/sing-box" >&2
            ls -al
            exit 1
          fi

          # 遍历仓库中的 rule-set/*.json 文件并编译为对应的 .srs
          compiled=0
          for file in "$GITHUB_WORKSPACE"/rule-set/*.json; do
            [ -e "$file" ] || continue
            base_name=$(basename "$file" .json)
            out="$GITHUB_WORKSPACE/rule-set/${base_name}.srs"
            echo "Compiling $file -> $out"
            ./sing-box rule-set compile --output "$out" "$file"
            compiled=1
          done

          if [ "$compiled" -eq 0 ]; then
            echo "No JSON files found in rule-set/ to compile."
          fi

      - name: Commit and push compiled .srs (if changed)
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          cd "$GITHUB_WORKSPACE"
          git add rule-set/*.srs || true

          # 仅当有改动时提交
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: compile rule-set -> .srs (by GitHub Actions)"
            git push
          fi
